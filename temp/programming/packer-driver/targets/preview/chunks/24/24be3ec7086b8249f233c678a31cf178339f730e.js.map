{"version":3,"sources":["file:///Users/hanchuang/Games/RotateBlock/assets/src/GameArea.ts"],"names":["_decorator","Component","instantiate","Prefab","Vec3","Grid","GameController","BlockEnum","ccclass","property","GameArea","type","grids","start","createBlock","i","node","GridPrefab","x","y","Math","floor","setPosition","getChildByName","addChild","push","getComponent","hide","getGridByPosition","pos","nearest","temp","index","distance","sqrt","pow","getPosition","undefined","resetBlock","Instance","testBlock","block","testBlockIndex","data","getRotation","rotation","list","console","log","indexRow","canAdd","length","row","Filled","addBlock","show","checkGameOver","checkRow","rowList","allFilled","j","checkCol","colList","blast","isOver","times","blocks","blockUsing","result","getBlockData"],"mappings":"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","sourcesContent":["import { _decorator, Component, DistanceJoint2D, instantiate, NodeEventType, Prefab, UIOpacity, Vec3 } from \"cc\";\nimport { Grid } from \"./Grid\";\nimport { GameController } from \"./GameController\";\nimport { BlockEnum } from \"./BlockEnum\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('GameArea')\nexport class GameArea extends Component {\n    start() {\n        this.createBlock();\n\n    }\n    @property({\n        type: Prefab,\n    })\n    GridPrefab: Prefab;\n\n    grids = [];\n\n    public createBlock() {\n        for (let i = 0; i < 64; i++) {\n            let node = instantiate(this.GridPrefab);\n            let x = (i % 8) * 80 - 320 + 40;\n            let y = Math.floor(i / 8) * 80 - 320 + 40;\n            node.setPosition(new Vec3(x, y, 0));\n            this.node.getChildByName(\"Container\").addChild(node);\n            this.grids.push(node);\n            node.getComponent(Grid).hide();\n\n\n        }\n    }\n\n    public getGridByPosition(pos) {\n        let nearest;\n        let temp;\n        let index;\n        for (let i = 0; i < 64; i++) {\n            let distance = Math.sqrt(\n                Math.pow(pos.x - this.node.getPosition().x - this.grids[i].getPosition().x + 40, 2)\n                + Math.pow(pos.y - this.node.getPosition().y - this.grids[i].getPosition().y - 160 + 40, 2)\n            )\n            if (nearest == undefined) {\n                nearest = distance;\n                temp = this.grids[i];\n                index = i;\n            }\n            if (distance < nearest) {\n                nearest = distance;\n                temp = this.grids[i];\n                index = i;\n            }\n        }\n        if (nearest > 80) {\n            this.resetBlock();\n        } else {\n\n        }\n\n        // temp.getComponent(Grid).show();\n        return index;\n    }\n\n    public resetBlock() {\n        GameController.Instance.resetBlock();\n    }\n\n    public testBlock(pos, block) {\n        let index = this.getGridByPosition(pos);\n        return this.testBlockIndex(index, block);\n    }\n\n    public testBlockIndex(index, block) {\n\n        let data = BlockEnum.getRotation(block.type, block.rotation);\n        let list = data.rotation;\n        console.log(list);\n        let indexRow = Math.floor(index / 8);\n\n        let canAdd = true;\n        for (let i = 0; i < list.length; i++) {\n            console.log(\"格子\" + (index + list[i]))\n            if (index + list[i] >= 64) {\n                canAdd = false;\n                break;\n            }\n            if (Math.floor((index + list[i]) / 8) != indexRow + data.row[i]) {\n                canAdd = false;\n                break;\n            }\n\n            console.log(this.grids[index + list[i]].getComponent(Grid).Filled)\n            if (this.grids[index + list[i]].getComponent(Grid).Filled) {\n                canAdd = false;\n                break;\n            }\n        }\n        return { canAdd: canAdd, index: index };\n    }\n\n    public addBlock(index, block) {\n        let list = BlockEnum.getRotation(block.type, block.rotation).rotation;\n        for (let i = 0; i < list.length; i++) {\n            this.grids[index + list[i]].getComponent(Grid).show();\n        }\n        this.checkGameOver();\n    }\n\n    public checkRow() {\n        let rowList = [];\n        for (let i = 0; i < 8; i++) {\n            let allFilled = true\n            for (let j = 0; j < 8; j++) {\n                if (!this.grids[i * 8 + j].getComponent(Grid).Filled) {\n                    allFilled = false;\n                    break;\n                }\n            }\n            console.log(allFilled);\n            if (allFilled) {\n                rowList.push(i);\n            }\n        }\n        return rowList;\n    }\n\n    public checkCol() {\n        let colList = [];\n        for (let i = 0; i < 8; i++) {\n            let allFilled = true\n            for (let j = 0; j < 8; j++) {\n                console.log(this.grids[i + j * 8].getComponent(Grid).Filled);\n                if (!this.grids[i + j * 8].getComponent(Grid).Filled) {\n                    allFilled = false;\n                    break;\n                }\n            }\n            console.log(allFilled);\n            if (allFilled) {\n                colList.push(i);\n            }\n\n        }\n        return colList;\n    }\n\n    public blast(index) {\n        this.grids[index].getComponent(Grid).hide();\n    }\n\n    public checkGameOver() {\n        let isOver = true;\n        let times = 0;\n        for (let j = 0; j < GameController.Instance.blocks.length; j++) {\n            if (GameController.Instance.blockUsing[j] == 1) {\n                continue;\n            }\n            for (let i = 0; i < this.grids.length; i++) {\n                let result;\n                if (this.grids[i].getComponent(\"Grid\").Filled) {\n                    result = {\n                        canAdd: false\n                    };\n                } else {\n                    result = this.testBlockIndex(i, GameController.Instance.blocks[j].getComponent(\"Block\").getBlockData());\n                    times++;\n                }\n                if (result.canAdd) {\n                    isOver = false;\n                    break;\n                }\n            }\n        }\n        console.log(\"计算次数\" + times + \"是否结束\" + isOver);\n    }\n\n}\n\n\n"]}