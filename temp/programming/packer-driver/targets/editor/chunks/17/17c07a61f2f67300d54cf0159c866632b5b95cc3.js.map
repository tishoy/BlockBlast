{"version":3,"sources":["file:///Users/hanchuang/Games/RotateBlock/assets/src/GameArea.ts"],"names":["_decorator","Component","instantiate","Prefab","Vec3","Grid","GameController","BlockEnum","ccclass","property","GameArea","type","grids","start","createBlock","i","node","GridPrefab","x","y","Math","floor","setPosition","getChildByName","addChild","push","getComponent","hide","getGridByPosition","pos","nearest","temp","index","distance","sqrt","pow","getPosition","undefined","resetBlock","Instance","testBlock","block","list","getRotation","rotation","console","log","canAdd","length","Filled","addBlock","show","checkRow","rowList","allFilled","j","checkCol","colList","blast"],"mappings":"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","sourcesContent":["import { _decorator, Component, DistanceJoint2D, instantiate, NodeEventType, Prefab, UIOpacity, Vec3 } from \"cc\";\nimport { Grid } from \"./Grid\";\nimport { GameController } from \"./GameController\";\nimport { BlockEnum } from \"./BlockEnum\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('GameArea')\nexport class GameArea extends Component {\n    start() {\n        this.createBlock();\n\n    }\n    @property({\n        type: Prefab,\n    })\n    GridPrefab: Prefab;\n\n    grids = [];\n\n    public createBlock() {\n        for (let i = 0; i < 64; i++) {\n            let node = instantiate(this.GridPrefab);\n            let x = (i % 8) * 80 - 320 + 40;\n            let y = Math.floor(i / 8) * 80 - 320 + 40;\n            node.setPosition(new Vec3(x, y, 0));\n            this.node.getChildByName(\"Container\").addChild(node);\n            this.grids.push(node);\n            node.getComponent(Grid).hide();\n\n\n        }\n    }\n\n    public getGridByPosition(pos) {\n        let nearest;\n        let temp;\n        let index;\n        for (let i = 0; i < 64; i++) {\n            let distance = Math.sqrt(\n                Math.pow(pos.x - this.node.getPosition().x - this.grids[i].getPosition().x + 40, 2)\n                + Math.pow(pos.y - this.node.getPosition().y - this.grids[i].getPosition().y - 160 + 40, 2)\n            )\n            if (nearest == undefined) {\n                nearest = distance;\n                temp = this.grids[i];\n                index = i;\n            }\n            if (distance < nearest) {\n                nearest = distance;\n                temp = this.grids[i];\n                index = i;\n            }\n        }\n        if (nearest > 80) {\n            this.resetBlock();\n        } else {\n\n        }\n\n        // temp.getComponent(Grid).show();\n        return index;\n    }\n\n    public resetBlock() {\n        GameController.Instance.resetBlock();\n    }\n\n    public testBlock(pos, block) {\n        let index = this.getGridByPosition(pos);\n        let list = BlockEnum.getRotation(block.type, block.rotation).rotation;\n        console.log(list);\n        let canAdd = true;\n        for (let i = 0; i < list.length; i++) {\n            console.log(\"格子\" + (index + list[i]))\n            console.log(this.grids[index + list[i]].getComponent(Grid).Filled)\n            if (this.grids[index + list[i]].getComponent(Grid).Filled) {\n                canAdd = false;\n                break;\n            }\n        }\n        return { canAdd: canAdd, index: index };\n    }\n\n    public addBlock(index, block) {\n        let list = BlockEnum.getRotation(block.type, block.rotation).rotation;\n        for (let i = 0; i < list.length; i++) {\n            this.grids[index + list[i]].getComponent(Grid).show();\n        }\n\n    }\n\n    public checkRow() {\n        let rowList = [];\n        for (let i = 0; i < 8; i++) {\n            let allFilled = true\n            for (let j = 0; j < 8; j++) {\n                if (!this.grids[i * 8 + j].getComponent(Grid).Filled) {\n                    allFilled = false;\n                    break;\n                }\n            }\n            console.log(allFilled);\n            if (allFilled) {\n                rowList.push(i);\n            }\n        }\n        return rowList;\n    }\n\n    public checkCol() {\n        let colList = [];\n        for (let i = 0; i < 8; i++) {\n            let allFilled = true\n            for (let j = 0; j < 8; j++) {\n                console.log(this.grids[i + j * 8].getComponent(Grid).Filled);\n                if (!this.grids[i + j * 8].getComponent(Grid).Filled) {\n                    allFilled = false;\n                    break;\n                }\n            }\n            console.log(allFilled);\n            if (allFilled) {\n                colList.push(i);\n            }\n\n        }\n        return colList;\n    }\n\n    public blast(index) {\n        this.grids[index].getComponent(Grid).hide();\n    }\n\n\n}\n\n\n"]}