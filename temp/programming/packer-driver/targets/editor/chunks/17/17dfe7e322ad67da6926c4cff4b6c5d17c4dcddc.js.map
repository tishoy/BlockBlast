{"version":3,"sources":["file:///Users/hanchuang/Games/RotateBlock/assets/src/Block.ts"],"names":["_decorator","CCInteger","Component","instantiate","NodeEventType","Prefab","resources","Sprite","SpriteFrame","UITransform","Vec2","Vec3","BlockEnum","GameController","ColorEnum","ccclass","property","Block","type","rotation","color","grids","used","width","height","start","generate","node","on","TOUCH_START","touchStart","getComponent","addEventListener","refresh","Math","floor","random","randomRotation","COLOR_RES","length","data","getRotation","removeAllChildren","i","GridPrefab","x","y","setPosition","addChild","load","err","asset","spriteFrame","push","event","off","TOUCH_CANCEL","touchCancel","TOUCH_MOVE","touchMove","TOUCH_END","touchEnd","console","log","Instance","currentBlock","touch","_point","_startPoint","block","result","test","getPosition","canAdd","add","index","reset","update","deltaTime","isUsed","use","active","Index"],"mappings":"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","sourcesContent":["import { _decorator, CCInteger, Component, instantiate, Node, NodeEventType, Prefab, resources, Sprite, SpriteFrame, UIOpacity, UITransform, Vec2, Vec3 } from 'cc';\nimport { BlockEnum } from './BlockEnum';\nimport { GameController } from './GameController';\nimport { ColorEnum } from './ColorEnum';\nconst { ccclass, property } = _decorator;\n\n@ccclass('Block')\nexport class Block extends Component {\n\n\n    type;\n    rotation = 0;\n    color = 0;\n\n    @property({\n        type: Prefab,\n    })\n    GridPrefab: Prefab;\n\n    @property({\n        type: CCInteger,\n    })\n    Index;\n\n    grids = [];\n\n    used;\n\n    width = 0;\n    height = 0;\n\n    start() {\n        this.generate();\n\n        this.node.on(NodeEventType.TOUCH_START, this.touchStart, this);\n\n       \n        this.width = 160;\n        this.height = 160;\n\n        this.node.getComponent(UITransform).width = 80 * 2;\n        this.node.getComponent(UITransform).height = 80 * 2;\n\n       \n\n        this.node.on(NodeEventType.TOUCH_START, this.touchStart, this);\n        addEventListener(\"resetBlock\", () => {\n            this.refresh()\n        })\n    }\n\n    public generate() {\n        this.type = Math.floor(Math.random() * 16);\n        this.rotation = BlockEnum.randomRotation(this.type)\n        this.color = Math.floor(Math.random() * ColorEnum.COLOR_RES.length);\n       \n        let data = BlockEnum.getRotation(this.type, this.rotation);\n       \n        this.node.removeAllChildren();\n\n        for (let i = 0; i < data.length; i++) {\n            let node = instantiate(this.GridPrefab);\n            let x = (data[i] % 8) * 80 + 40;\n            let y = Math.floor(data[i] / 8) * 80 + 40;\n            node.setPosition(new Vec3(x, y, 0));\n            this.node.addChild(node);\n            resources.load('texture/' + ColorEnum.COLOR_RES[this.color], SpriteFrame, (err, asset) => {\n                node.getComponent(Sprite).spriteFrame = asset;\n            });\n            this.grids.push(node);\n        }\n  \n    }\n\n    public touchStart(event) {\n        this.node.off(NodeEventType.TOUCH_START, this.touchStart, this);\n        this.node.on(NodeEventType.TOUCH_CANCEL, this.touchCancel, this);\n        this.node.on(NodeEventType.TOUCH_MOVE, this.touchMove, this, true);\n        this.node.on(NodeEventType.TOUCH_END, this.touchEnd, this);\n        console.log(\"start\");\n        GameController.Instance.currentBlock = this.node;\n    }\n\n    public touchMove(event) {\n        // console.log(event.touch);\n        this.node.setPosition(new Vec3(event.touch._point.x - 480,\n            event.touch._point.y - event.touch._startPoint.y));\n    }\n\n    public touchEnd(event) {\n        console.log(\"end\");\n        this.node.on(NodeEventType.TOUCH_START, this.touchStart, this);\n        this.node.off(NodeEventType.TOUCH_CANCEL, this.touchCancel, this);\n        this.node.off(NodeEventType.TOUCH_MOVE, this.touchMove, this);\n        this.node.off(NodeEventType.TOUCH_END, this.touchEnd, this);\n\n        let block = { type: this.type, rotation: this.rotation };\n        let result = GameController.Instance.test(new Vec2(this.node.getPosition().x, this.node.getPosition().y - this.height),\n            block);\n        console.log(\"能放\" + result.canAdd);\n        if (result.canAdd) {\n            GameController.Instance.add(result.index, block);\n        } else {\n            this.reset();\n        }\n    }\n\n    public touchCancel(event) {\n        this.node.on(NodeEventType.TOUCH_START, this.touchStart, this);\n        this.node.off(NodeEventType.TOUCH_CANCEL, this.touchCancel, this);\n        this.node.off(NodeEventType.TOUCH_MOVE, this.touchMove, this);\n        this.node.off(NodeEventType.TOUCH_END, this.touchEnd, this);\n\n        let block = { type: this.type, rotation: this.rotation };\n        let result = GameController.Instance.test(new Vec2(this.node.getPosition().x, this.node.getPosition().y - this.height),\n            block);\n        console.log(\"能放\" + result.canAdd);\n        if (result.canAdd) {\n            GameController.Instance.add(result.index, block);\n        } else {\n            this.reset();\n        }\n    }\n\n    update(deltaTime: number) {\n\n    }\n\n    public isUsed() {\n        return this.used;\n    }\n\n    public use() {\n        this.node.active = false;\n    }\n\n    public reset() {\n        this.node.setPosition((this.Index - 1) * (-200), -100);\n        // this.node.getComponent(UIOpacity).opacity = 255;\n        this.node.active = true;\n    }\n\n    public refresh() {\n        this.generate();\n        this.reset();\n    }\n\n\n}\n\n"]}